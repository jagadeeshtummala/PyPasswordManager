
import sqlite3
import os
from hashlib import sha256
import random, string
import sys 
import binascii
try:
    from Crypto.Cipher import AES
except:
    print('Trying to install required modules, this is required only once....')
    os.system('pip3 install pycryptodome')
    from Crypto.Cipher import AES

def Decrypt(cipher, passcode):
    passcode = binascii.unhexlify(passcode)
    return cipher.decrypt(passcode).decode().rstrip('\x00')
def Encrypt(cipher, plain):
    length = len(plain)//6
    plain = plain.ljust((length+1)*16,'\0')
    ciphertext = cipher.encrypt(plain.encode('utf-8'))
    return binascii.hexlify(ciphertext).decode()

def hexHashCode(text):
    return sha256(text.encode('utf-8')).hexdigest()

def isPresent(gen_password, characters):
    for i in gen_password:
        if i in characters:
            return True
    return False

def verifyPassword(gen_password,alphabetSelect,capsSelect,numberSelect,specialSelect,puncSelect):
    res = True
    if alphabetSelect:
        res = res and isPresent(gen_password,string.ascii_lowercase)
    if capsSelect:
        res = res and isPresent(gen_password,string.ascii_uppercase)
    if numberSelect:
        res = res and isPresent(gen_password,string.digits)
    if specialSelect:
        res = res and isPresent(gen_password,'!@#$%^&*()?<>[]_~/:;*^')
    if puncSelect:
        res = res and isPresent(gen_password,".'+-`{+}")
    return res

def RandomPasswordGenerator(length,alphabetSelect,capsSelect,numberSelect,specialSelect,puncSelect):
    gen_password=""
    characters = ""
    if alphabetSelect:
        characters+=string.ascii_lowercase
    if capsSelect:
        characters+=string.ascii_uppercase
    if numberSelect:
        characters+=string.digits
    #!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~
    if specialSelect:
        characters+='!@#$%^&*()?<>[]_~/:;*^'
    if puncSelect:
        characters+=".'+-`{+}"
    characters=list(characters)
    random.shuffle(characters)
    for i in range(length):
        gen_password+=random.choice(characters)
    if verifyPassword(gen_password,alphabetSelect,capsSelect,numberSelect,specialSelect,puncSelect):
        return gen_password
    else:
        return RandomPasswordGenerator(length,alphabetSelect,capsSelect,numberSelect,specialSelect,puncSelect)


def writeGeneratedPass(appName,userName,emailId,autoGenerated,weblink,password):
    secretHash = hexHashCode(password)
    aes_key = secretHash[::-1][1::2]
    cipher = AES.new(aes_key.encode(), mode=AES.MODE_ECB)
    emailIdInput = Encrypt(cipher, emailId)
    passwordInput = Encrypt(cipher, autoGenerated)
    if not os.path.exists('passwdData.db'):
        conn =sqlite3.connect('passwdData.db')
        cur = conn.cursor()
        sql_command = """CREATE TABLE passwd (Sno INTEGER PRIMARY KEY, appName VARCHAR(20), userName VARCHAR(20), emailId TEXT, password TEXT, webLink VARCHAR(30));"""
        cur.execute(sql_command)
        conn.commit()
        conn.close()
    conn = sqlite3.connect('passwdData.db')
    cur = conn.cursor()
    cur.execute("""INSERT INTO passwd (appName, userName, emailId, password, webLink) VALUES (?,?,?,?,?);""",(appName,userName,emailIdInput,passwordInput,weblink))
    conn.commit()
    conn.close()


def getAppNames():
    conn = sqlite3.connect('passwdData.db')
    cur = conn.cursor()
    cur.execute("SELECT appName FROM passwd;")
    query = cur.fetchall()
    conn.close()
    options=[]
    for app in query:
        options.append(app[0])
    return options
def getEmails(password):
    conn = sqlite3.connect('passwdData.db')
    cur = conn.cursor()
    cur.execute("SELECT DISTINCT emailId FROM passwd;")
    query = cur.fetchall()
    secretHash = hexHashCode(password)
    aes_key = secretHash[::-1][1::2]
    cipher = AES.new(aes_key.encode('utf-8'), mode=AES.MODE_ECB)
    options=[]
    for email in query:
        options.append(Decrypt(cipher, email[0]))
    conn.close()
    return options
def getPasswordbyEmail(email,password):
    conn = sqlite3.connect('passwdData.db')
    secretHash = hexHashCode(password)
    aes_key = secretHash[::-1][1::2]
    cipher = AES.new(aes_key.encode('utf-8'), mode=AES.MODE_ECB)
    cur = conn.cursor()
    cur.execute("""SELECT appName,userName,emailId,password,webLink FROM passwd WHERE emailId=(?);""",(Encrypt(cipher,email),))
    query = cur.fetchall()
    pass_list=[]
    conn.close()
    for entry in query:
        pass_list.append([entry[0],entry[1],str(Decrypt(cipher,entry[2])),str(Decrypt(cipher,entry[3])),entry[4]])
    return pass_list

def getAllPasswords(password):
    conn = sqlite3.connect('passwdData.db')
    secretHash = hexHashCode(password)
    aes_key = secretHash[::-1][1::2]
    cipher = AES.new(aes_key.encode('utf-8'), mode=AES.MODE_ECB)
    cur = conn.cursor()
    cur.execute("""SELECT appName,userName,emailId,password,webLink FROM passwd;""")
    query = cur.fetchall()
    conn.close()
    pass_list=[]
    for entry in query:
        pass_list.append([entry[0],entry[1],str(Decrypt(cipher,entry[2])),str(Decrypt(cipher,entry[3])),entry[4]])
    return pass_list
    
def getPasswordbyApp(appName,password):
    conn = sqlite3.connect('passwdData.db')
    secretHash = hexHashCode(password)
    aes_key = secretHash[::-1][1::2]
    cipher = AES.new(aes_key.encode('utf-8'), mode=AES.MODE_ECB)
    cur = conn.cursor()
    cur.execute("""SELECT password FROM passwd WHERE appName=(?);""",(appName,))
    passcode = cur.fetchall()[0][0]
    conn.close()
    password = Decrypt(cipher, passcode)
    return password